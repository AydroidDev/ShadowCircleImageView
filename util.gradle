/*
 *  Copyright (c) 2017.  Joe
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

def initGradleEnvironment() {

    Properties properties = new Properties()
    boolean isHasFile = false
    File propertyFile = new File(rootDir.getAbsolutePath() + "/local.properties")
    if (propertyFile.exists()) {
        isHasFile = true
        properties.load(propertyFile.newDataInputStream())
    }
    gradle.ext.isHasFile = isHasFile
    gradle.ext.user = properties.getProperty('bintray.user')
    gradle.ext.apikey = properties.getProperty('bintray.apikey')
    gradle.ext.password = properties.getProperty('password')
    gradle.ext.keyAlias = properties.getProperty('keyAlias')
}

initGradleEnvironment()

String initTag() {
    try {
        def versionName = 'git describe --abbrev=0 --tags'.execute([], project.rootDir).text.trim()
        if (version == null || "" == versionName) {
            return "0.0.0"
        }
        println "versionName:$versionName"
        return versionName
    } catch (e) {
        println e.toString()
        return "0.0.0"
    }
}

int initCount() {
    try {
        def versionCode = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())
        println "versionCode:$versionCode"
        return versionCode
    } catch (e) {
        println e.toString()
        return 1
    }
}

ext {
    gitTag = initTag()
    gitCommitCount = initCount()
}


